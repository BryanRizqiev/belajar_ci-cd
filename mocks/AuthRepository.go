// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	entity "belajar-go-echo/module/user/entity"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepositoryInterface type
type AuthRepository struct {
	mock.Mock
}

// CheckUser provides a mock function with given fields: email, password
func (_m *AuthRepository) CheckUser(email string, password string) (entity.UserDTO, error) {
	ret := _m.Called(email, password)

	var r0 entity.UserDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entity.UserDTO, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) entity.UserDTO); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(entity.UserDTO)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
