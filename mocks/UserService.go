// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "belajar-go-echo/module/user/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserServiceInterface type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: req
func (_m *UserService) CreateUser(req entity.UserDTO) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.UserDTO) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUser provides a mock function with given fields:
func (_m *UserService) GetAllUser() ([]entity.UserDTO, error) {
	ret := _m.Called()

	var r0 []entity.UserDTO
	if rf, ok := ret.Get(0).(func() []entity.UserDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.UserDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
